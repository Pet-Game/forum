@page "{id}"
@using PetGameForum.Services
@model PetGameForum.Pages.Forum.ThreadModel
@inject SignInManager<User> SignInManager
@inject RoleService RoleService

@{
    ViewData["Title"] = Model.Thread.Topic;
}

<partial name="Shared/_BanUserPartial" />

<h2>@Model.Thread.Topic</h2>
<p>by <b>@Model.Thread.Author.Name</b></p>

@{
    var canDelete = await RoleService.HasPermission(User, Permission.DeletePosts);
    var canNuke = await RoleService.HasPermission(User, Permission.NukePosts);
    var canBan = await RoleService.HasPermission(User, Permission.TempBanShort) ||
                     await RoleService.HasPermission(User, Permission.TempBanLong) ||
                     await RoleService.HasPermission(User, Permission.PermaBan);
    var canRestore = await RoleService.HasPermission(User, Permission.RestorePosts);
}

<form method="post" style="display: none" id="post_action_form">
    <input asp-for="PostAction.Type"/>
    <input asp-for="PostAction.Post"/>
    <!-- <input asp-for="PostAction.Reason"/> -->
</form>

<script>
    const postActionForm = document.getElementById("post_action_form");
    const formType = postActionForm.children[0];
    const formPostId = postActionForm.children[1];
    //const formReason = postActionForm.children[2];
    function postAction(action, postId, authorId, authorName) {
        formType.value = action;
        formPostId.value = postId;
        //formReason.value = null;
        //formBanDuration.value = null;
        switch (action){
            case "delete":
                if (confirm(`do you really want to delete post ${postId} by ${authorName}?`)){
                    postActionForm.submit();
                }
                break;
            case "nuke":
                if (confirm(`do you really want to nuke post ${postId} by ${authorName}? (it will be unrecoverable)`)){
                    postActionForm.submit();
                }
                break;
            case "ban":
                ban(authorId, authorName);
                break;
            case "restore":
                postActionForm.submit();
                break;
        }

    }
</script>


<table class="forum-threadlist">
    @foreach (var post in Model.Posts) {
        
        @if (!post.Deleted || await RoleService.HasPermission(User, Permission.SeeDeletedInformation)) {
            @if (post.Deleted) {
                <tr><td style="background-color: lightgray; text-align: center" 
                        onclick="document.getElementById('@post.Id').style.removeProperty('display'); this.style.display = 'none';">
                    --- deleted post ---
                </td></tr>
            }
            <tr id="@post.Id" class="@(post.Deleted ? "post-deleted" : "")" style="@(post.Deleted ? "display: none" : "")">
                <td class="post-user">
                    <h4><a href="@post.Author.Link()">@post.Author.Name</a></h4>
                    <img src="@post.Author.Pfp" class="pfp" alt="@post.Author.Name's profile picture"/>
                </td>
                <td style="position:relative;">
                    <p style="margin-right: 60px;">@Html.Raw(@post.CompiledContent)</p>
                    <p class="post-timestamp">Posted @post.Id.CreationTime.ToString("HH:mm, MMMM dd yyyy")</p>
                    <select style="top:10px; right:10px; width: 50px; position: absolute" name="..."
                            onchange="
                                postAction(this.value, '@post.Id', '@post.Author.Id', '@post.Author.Name');
                                this.selectedIndex = 0;
                            ">
                        <option selected>...</option>
                        @if (await RoleService.HasPermission(User, Permission.SeeModeratorArea)) {
                            <optgroup label="moderation">
                                @if (canDelete && !post.Deleted) {
                                    <option value="delete">delete post</option>
                                }
                                @if (canRestore && post.Deleted) {
                                    <option value="restore">restore post</option>
                                }
                                @if (canNuke) {
                                    <option value="nuke">nuke post</option>
                                }
                                @if (canBan) {
                                    <option value="ban">ban @post.Author.Name</option>
                                }
                            </optgroup>
                        }
                    </select>
                </td>
            </tr>
        }
    }
</table>

@if (SignInManager.IsSignedIn(User)) {
    <p>New Post:</p>
    <table style="width: 100%">
        <tr>
            <td style="width: 0">
                <button onclick="show_input()">
                    write
                </button>
            </td>
            <td style="width: 0">
                <button onclick="show_preview()">
                    preview
                </button>
            </td>
            <td>
                <!-- buffer :) -->
            </td>
        </tr>
        <tr>
            <td colspan="3">
                <form method="post" style="display: flex">
                    <textarea asp-for="UserPostInput" 
                            class="form-control" maxlength="@Model.MaxPostLength" 
                            id="post-input"></textarea>
                    <div class="form-control" style="display: none" id="post-preview">Lorem ipsum</div>
                    <input type="submit" value="Post" class="btn btn-primary"/>
                </form>
            </td>
        </tr>
    </table>
    
    <script>
        let input = document.getElementById("post-input");
        let preview = document.getElementById("post-preview");
        function show_preview(){
            preview.innerText = "loading preview...";
            preview.style.removeProperty("display");
            input.style.setProperty("display", "none");
            
            let markdown = input.value;
            fetch("/MarkdownPreview", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/text',
                    },
                    body: markdown
                })
                .then(response => response.text())
                .then(data => preview.innerHTML = data)
                .catch(err => preview.innerText = "could not load preview: " + err);
        }
        
        function show_input(){
            input.style.removeProperty("display");
            preview.style.setProperty("display", "none");
        }
    </script>
} else {
    <p>Log in to post something!</p>
}